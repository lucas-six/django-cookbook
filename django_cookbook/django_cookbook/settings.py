"""
Django settings for django_cookbook project.

Generated by 'django-admin startproject' using Django 4.2.18.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from typing import Any

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-46hos=mzo#h(^q06l2@+*qr=(1do^=(=e!8e#urr8(qot!yuo2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(os.environ.get('DEBUG', False))

ALLOWED_HOSTS: list[str] = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app',
    'rest_framework',
    'django_filters',
    'crispy_forms',
    'crispy_bootstrap5',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'django_cookbook.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_cookbook.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ['DB_NAME'],
        'USER': os.environ['DB_USER'],
        'PASSWORD': os.environ.get('DB_PASSWORD', ''),
        'HOST': os.environ.get('DB_HOST', '127.0.0.1'),
        'PORT': os.environ.get('DB_PORT', '5432'),
        #
        # Enable persistent database connections.
        #
        # - `None`: unlimitied persistent database connections.
        # - `0` (default): close database connections at the end of each request.
        'CONN_MAX_AGE': 0 if DEBUG else 10,  # in seconds.
        #
        # Setting `CONN_HEALTH_CHECKS` to `True` can be used to improve the robustness of
        # connection reuse and prevent errors when a connection has been closed by the
        # database server which is now ready to accept and serve new connections.
        # Since Django 4.1
        'CONN_HEALTH_CHECKS': True,
        'OPTIONS': {
            #'pool': True,  # Django 5.0+
            'server_side_binding': True,
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'UTC'

USE_I18N = False

USE_TZ = True

DATE_FORMAT = 'Y-m-d'  # 2025-01-01


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Cache
# https://docs.djangoproject.com/en/4.2/ref/settings/#caches
# https://docs.djangoproject.com/en/4.2/topics/cache/

CACHES = {
    #'default': {
    #    'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    # },
    #
    # Redis
    #
    # LOCATION:
    #   - redis://localhost:6379/0
    #   - rediss://localhost:6379/0
    #   - unix:///path/to/socket.sock?db=0
    #
    # TIMEOUT:
    #   - None means persistent forever
    #   - 0 means no cache
    #   - any float means default expire time in seconds
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        #
        # standalone mode
        'LOCATION': os.environ.get('REDIS_URL', 'redis://127.0.0.1:6379/0'),
        # replication mode
        #'LOCATION': [
        #    'redis://127.0.0.1:6379/0',  # leader
        #    'redis://127.0.0.1:6378/0',  # read-replica 1
        #    'redis://127.0.0.1:6377/0',  # read-replica 2
        # ],
        'TIMEOUT': float(os.environ.get('CACHE_TIMEOUT', 300)),
        'OPTIONS': {
            #'parser_class': 'redis.connection.HiredisParser',
            #'pool_class': 'redis.ConnectionPool',
            'max_connections': int(os.environ.get('CACHE_MAX_CONNS', 4096)),
            'socket_connect_timeout': float(os.environ.get('CACHE_CONN_TIMEOUT', 3.5)),
            'socket_timeout': float(os.environ.get('CACHE_SOCK_TIMEOUT', 5.5)),
            'health_check_interval': int(os.environ.get('CACHE_KEEPALIVE', 5)),
        },
    },
}


# Logging
# https://docs.djangoproject.com/en/4.2/topics/logging/

LOGGING: dict[str, Any] = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'info': {
            'format': '[%(levelname)s] [%(asctime)s] %(message)s',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'handlers': {
        'console': {
            'filters': ['require_debug_false'],
            'class': 'logging.StreamHandler',
            'formatter': 'info',
        },
    },
    'loggers': {
        # 'django': {
        #     'handlers': ['console_debug'],
        #     'propagate': False,
        #     'level': 'INFO' if DEBUG else 'WARNING',
        # },
        '': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        # 'requests': {
        #     'handlers': ['console_debug'],
        #     'level': 'INFO',
        #     'propagate': False,
        # },
        # 'elasticsearch': {
        #     'handlers': ['console_debug'],
        #     'level': 'INFO',
        #     'propagate': False,
        # },
    },
}
if DEBUG:
    LOGGING_DEBUG_FORMATTER_NAME = 'debug'
    LOGGING_DEBUG_HANDLER_NAME = 'console_debug'

    LOGGING['formatters'][LOGGING_DEBUG_FORMATTER_NAME] = {
        'format': '%(log_color)s[%(asctime)s][%(name)s] [%(threadName)s:%(thread)d] %(message)s',
        'class': 'colorlog.ColoredFormatter',
        'log_colors': {
            'DEBUG': 'cyan white',
            'INFO': 'green',
            'WARNING': 'yellow',
            'ERROR': 'red',
            'CRITICAL': 'bold_red',
        },
    }

    LOGGING['handlers'][LOGGING_DEBUG_HANDLER_NAME] = {
        'filters': ['require_debug_true'],
        'class': 'logging.StreamHandler',
        'formatter': LOGGING_DEBUG_FORMATTER_NAME,
    }

    LOGGING['loggers']['']['handlers'].append(LOGGING_DEBUG_HANDLER_NAME)
    LOGGING['loggers']['']['level'] = 'DEBUG'
    LOGGING['loggers']['django.utils.autoreload'] = {
        'handlers': [LOGGING_DEBUG_HANDLER_NAME],
        'propagate': False,
        'level': 'WARNING',
    }


# CSRF
#
# CSRF_HEADER_NAME = 'HTTP_X_CSRFTOKEN'  # HTTP header: X-CSRFToken
# CSRF_COOKIE_AGE = 31449600  # in seconds


# Debug Toolbar
#
# Only enable the toolbar when we're in debug mode and we're
# not running tests. Django will change DEBUG to be False for
# tests, so we can't rely on DEBUG alone.
DEBUG_TOOLBAR = bool(os.environ.get('DEBUG_TOOLBAR', DEBUG))
if DEBUG_TOOLBAR:
    INSTALLED_APPS = [
        *INSTALLED_APPS,
        'debug_toolbar',
    ]
    MIDDLEWARE = [
        'debug_toolbar.middleware.DebugToolbarMiddleware',
        *MIDDLEWARE,
    ]

    STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

    INTERNAL_IPS = ['127.0.0.1']
    DEBUG_TOOLBAR_PANELS = [
        'debug_toolbar.panels.versions.VersionsPanel',
        'debug_toolbar.panels.history.HistoryPanel',
        'debug_toolbar.panels.timer.TimerPanel',
        'debug_toolbar.panels.settings.SettingsPanel',
        'debug_toolbar.panels.headers.HeadersPanel',
        'debug_toolbar.panels.request.RequestPanel',
        'debug_toolbar.panels.sql.SQLPanel',
        'debug_toolbar.panels.staticfiles.StaticFilesPanel',
        'debug_toolbar.panels.templates.TemplatesPanel',
        'debug_toolbar.panels.alerts.AlertsPanel',
        'debug_toolbar.panels.cache.CachePanel',
        'debug_toolbar.panels.signals.SignalsPanel',
        'debug_toolbar.panels.redirects.RedirectsPanel',
        'debug_toolbar.panels.profiling.ProfilingPanel',
    ]
    DEBUG_TOOLBAR_CONFIG = {
        #'JQUERY_URL': 'https://cdn.bootcss.com/jquery/2.2.4/jquery.min.js',
        # Customize the config to support turbo and htmx boosting.
        'ROOT_TAG_EXTRA_ATTRS': 'data-turbo-permanent hx-preserve',
    }


# Django REST Framwork (DRF)
#
IGN_PERM = bool(os.environ.get('IGN_PERM', False))

REST_FRAMEWORK = {
    #
    # Pagination
    #
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    #
    # Filter
    #
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    #
    # Auth
    #
    'DEFAULT_AUTHENTICATION_CLASSES': [
        #'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',  # AJAX, Django default
    ],
    #
    # Permission
    #
    'DEFAULT_PERMISSION_CLASSES': [
        (
            'rest_framework.permissions.AllowAny'
            if IGN_PERM
            else 'rest_framework.permissions.DjangoModelPermissions'
        ),
    ],
}


# crispy-forms
#
CRISPY_ALLOWED_TEMPLATE_PACKS = 'bootstrap5'
CRISPY_TEMPLATE_PACK = 'bootstrap5'


MODEL_REMARK_MAXLEN = int(os.environ.get('MODEL_REMARK_MAXLEN', 512))
